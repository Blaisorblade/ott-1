metavar var, x ::=   {{ com  term variable }} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml string}} {{ lex alphanum}} {{ tex \mathit{[[var]]} }} {{ ocamllex ['a'-'z''A'-'Z']+ }}

grammar
%                lhs_of_app  rhs_of_app  lambda_body
%  | ( t )           y          y            y 
%  | x               y          y            y
%  | \ x . t         n          y            y
%  | t t'            y          n            y


term, t :: 'T_' ::=               {{ menhir-start }}
  | at             :: :: at          {{ quotient-remove }}   {{ ocaml [[at]] }}
  | lhs rhs        :: :: app
  | lambda         :: :: fn          {{ quotient-remove }}   {{ ocaml [[lambda]] }}

  | { t / x } t' :: M :: sub         {{ ichlo (tsubst_term [[t]] [[x]] [[t']])}}

                   
atomic_term, at :: 'T_' ::=       {{ quotient-with term}}      
  | x              :: :: var
  | ( t )          :: :: paren
                   
lhs :: 'T_' ::=                   {{ quotient-with term }}      
  | at             :: :: at_lhs       {{ quotient-remove }}   {{ ocaml [[at]] }}
  | lhs at         :: :: app_lhs      {{ quotient-remove }}   {{ ocaml T_app([[lhs]], [[at]]) }}
                   
rhs :: 'T_' ::=                   {{ quotient-with term }}      
  | at             :: :: at_rhs       {{ quotient-remove }}   {{ ocaml [[at]] }}
  | lambda         :: :: fn_rhs       {{ quotient-remove }}   {{ ocaml [[lambda]] }}
                   
lambda :: 'T_' ::=                {{ quotient-with term }}
  | \ x . t        :: :: lambda   


% %val,v :: 'v_' ::=                            {{ com value   }} 
% %  | \ x . t      ::   :: lam                   {{ com lambda  }}

terminals :: 'terminals_' ::=
  | \            ::   :: lambda  {{ tex \lambda }}
  | -->          ::   :: red     {{ tex \longrightarrow }}

%subrules
%  val <:: term

%substitutions
%  single term var :: tsubst 

% defns
% Jop :: '' ::=
% 
%  defn
%  t1 --> t2 :: ::reduce::'' {{ com [[t1]] reduces to [[t2]] }} {{ lemwcf  witness type reduce_witness; check reduce_check; eval : input -> output }} by
% 
% 
%     --------------------------  :: ax_app
%     (\x.t1) v2 -->  {v2/x}t1
% 
%     t1 --> t1'
%     -------------- :: ctx_app_fun
%     t1 t --> t1' t
% 
%     t1 --> t1'
%     -------------- :: ctx_app_arg
%     v t1 --> v t1'


